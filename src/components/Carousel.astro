<section class="slider" id="slider">
	<div class="slider-track">
		<article>
			<blockquote>
				"Estoy ansioso por usar Roomify. Me encanta la idea de encontrar roomies que realmente sean compatibles conmigo."
			</blockquote>
			<footer>
				<h1>Diego M.</h1>
				<p>Freelancer</p>
			</footer>
		</article>
		<article>
			<blockquote>
				"Finalmente podré publicar mis propiedades de forma sencilla y conectar con personas de confianza."
			</blockquote>
			<footer>
				<h1>Marcela S.</h1>
				<p>Propietaria</p>
			</footer>
		</article>
		<article>
			<blockquote>
				"Es justo lo que necesito para encontrar un lugar cómodo y seguro mientras estudio en la universidad."
			</blockquote>
			<footer>
				<h1>Sofía R.</h1>
				<p>Estudiante</p>
			</footer>
		</article>
		<article>
			<blockquote>
				"Estoy ansioso por usar Roomify. Me encanta la idea de encontrar roomies que realmente sean compatibles conmigo."
			</blockquote>
			<footer>
				<h1>Diego M.</h1>
				<p>Freelancer</p>
			</footer>
		</article>
		<article>
			<blockquote>
				"Finalmente podré publicar mis propiedades de forma sencilla y conectar con personas de confianza."
			</blockquote>
			<footer>
				<h1>Marcela S.</h1>
				<p>Propietaria</p>
			</footer>
		</article>
		<article>
			<blockquote>
				"Es justo lo que necesito para encontrar un lugar cómodo y seguro mientras estudio en la universidad."
			</blockquote>
			<footer>
				<h1>Sofía R.</h1>
				<p>Estudiante</p>
			</footer>
		</article>
		<article>
			<blockquote>
				"Estoy ansioso por usar Roomify. Me encanta la idea de encontrar roomies que realmente sean compatibles conmigo."
			</blockquote>
			<footer>
				<h1>Diego M.</h1>
				<p>Freelancer</p>
			</footer>
		</article>
	</div>
</section>
<nav class="fc between">
	<button type="button" id="prev" aria-label="Anterior">
		<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="var(--white)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m12 19-7-7 7-7"/><path d="M19 12H5"/></svg>
	</button>
	<div class="fc circles">
		<div class="circle"></div>
		<div class="circle"></div>
		<div class="circle"></div>
	</div>
	<button type="button" id="next" aria-label="Siguiente">
		<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="var(--white)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M5 12h14"/><path d="m12 5 7 7-7 7"/></svg>
	</button>
</nav>
<script>
	const slider = document.getElementById("slider");
	const track = slider.querySelector(".slider-track") as HTMLElement;
	const articles = Array.from(track.children);
	const circles = document.querySelectorAll(".circle");
	const prevButton = document.getElementById("prev");
	const nextButton = document.getElementById("next");

	let index = 1; // 0 1 2 3 4

	// Ajustar transform para el nodo inicial
	const totalSlides = 3

	const updateTransform = () => {
		track.style.transform = `translateX(${-(index - 1) * 100 / 7}%)`;
	};
	updateTransform();

	// Actualizar círculos
	const updateCircles = () => {
		circles.forEach((circle, i) => {
			circle.classList.toggle("active", i === (index % totalSlides));
		});
	};
	updateCircles();

	// Manejar botones
	const goToSlide = (newIndex: number) => {
		index = newIndex;
		if (newIndex > 4) {
			index = 0
		} else if (newIndex < -1) {
			index = 2
		}
		updateTransform();
		updateCircles();
	};

	nextButton.addEventListener("click", () => goToSlide(index + 1));
	prevButton.addEventListener("click", () => goToSlide(index - 1));

	// Animación infinita
	track.addEventListener("transitionend", () => {
		if (index <= -1) {
			index = totalSlides - 1;
			track.style.transition = "none";
			updateTransform();
			updateCircles();
			setTimeout(() => (track.style.transition = "transform 0.5s ease-in-out"), 0);
		} else if (index >= totalSlides) {
			index = 0;
			track.style.transition = "none";
			updateTransform();
			updateCircles();
			setTimeout(() => (track.style.transition = "transform 0.5s ease-in-out"), 0);
		}
	});

	// Scroll táctil
	let startX = 0;
	slider.addEventListener("touchstart", (e) => {
		startX = e.touches[0].clientX;
	});

	slider.addEventListener("touchend", (e) => {
		const diffX = e.changedTouches[0].clientX - startX;
		if (Math.abs(diffX) > 100) {
			if (diffX > 0) goToSlide(index - 1);
			else goToSlide(index + 1);
			startX = 0; // Reset para evitar múltiples movimientos
		}
	});
</script>

<style>
	section{
		overflow-x: hidden;
		gap: 48px;
	}
	article {
		min-width: 500px;
		display: flex;
		flex-direction: column;
	}
	blockquote {
		position: relative;
		border: 2px solid var(--sky);
		padding: 48px 48px 96px;
		border-radius: 48px;
		margin-bottom: 32px;
		flex: 1;
	}
	blockquote::before {
		position: absolute;
		content: "";
		width: 0;
		height: 0;
		left: 44px;
		bottom: -20px;
		border-left: 18px solid transparent;
		border-right: 18px solid transparent;
		border-top: 20px solid var(--sky);
	}
	blockquote::after {
		position: absolute;
		content: "";
		width: 0;
		height: 0;
		bottom: -17px;
		left: 46px;
		border-left: 16px solid transparent;
		border-right: 16px solid transparent;
		border-top: 18px solid var(--blue);
	}
	h1 {
		font-weight: 400;
		color: var(--sky);
	}
	footer {
		padding-left: 48px;
	}
	nav {
		width: 100%;
		max-width: 560px;
	}
	button:hover svg {
		stroke: var(--sky);
	}
	.slider-track {
		display: flex;
		align-items: stretch;
		gap: 48px;
		transition: transform 0.5s ease-in-out;
	}
	.circles {
		gap: 8px;
	}
	.circle {
		border-radius: 50%;
		width: 18px;
		height: 18px;
		background: var(--gray);
	}
	.circle.active {
		background: var(--sky);
	}
	@media (max-width: 1000px) {
		section {
			gap: 24px;
		}
		blockquote {
			padding: 24px 24px 48px;
			border-radius: 24px;
		}
		blockquote::before {
			left: 26px;
			bottom: -20px;
		}
		blockquote::after {
			bottom: -17px;
			left: 28px;
		}
		footer {
			padding-left: 24px;
		}
	}
	@media (max-width: 700px) {
		article {
			width: calc(100vw - 96px);
			max-width: unset;
			min-width: unset;
		}
	}
</style>